import pandas as pd
import numpy as np

# 设定随机种子以确保可重复性
np.random.seed(42)

# 定义家长编号
parent_ids = [f"P{str(i+1).zfill(3)}" for i in range(120)]

# --------------------------------------------
# 1. 基本信息（Q1-Q7）
# --------------------------------------------
# Q1: 身份（母亲68%、父亲25%、祖父母5%、其他亲属2%）
q1 = np.random.choice(
    ["母亲"]*82 + ["父亲"]*30 + ["祖父母"]*6 + ["其他亲属"]*2,
    size=120,
    replace=False
)

# Q2: 年龄（3%:25-，15%:26-30，40%:31-35，30%:36-40，12%:41+）
q2 = np.random.choice(
    ["25岁及以下"]*4 + ["26-30岁"]*18 + ["31-35岁"]*48 + ["36-40岁"]*36 + ["41岁及以上"]*14,
    size=120,
    replace=False
)

# Q3: 学历（5%:初中，20%:高中，25%:大专，45%:本科，5%:硕士）
q3 = np.random.choice(
    ["初中及以下"]*6 + ["高中/中专"]*24 + ["大专"]*30 + ["本科"]*54 + ["硕士及以上"]*6,
    size=120,
    replace=False
)

# Q4: 职业（10%:公务员，15%:教师，35%:企业职员，7.5%:自由职业，25%:全职家长，10%:个体户，2.5%:创业者，2.5%:其他）
q4 = np.random.choice(
    ["公务员/事业单位"]*12 + ["教师"]*18 + ["企业职员"]*42 + ["自由职业"]*9 + 
    ["全职家长"]*30 + ["个体户"]*12 + ["创业者"]*3 + ["其他"]*3,
    size=120,
    replace=False
)

# Q5: 家庭月收入（20%:3000-，10%:3000-5000，40%:5000-8000，20%:8000-12000，10%:12000+）
q5 = np.random.choice(
    ["3000元及以下"]*24 + ["3000-5000元"]*12 + ["5000-8000元"]*48 + 
    ["8000-12000元"]*24 + ["12000元及以上"]*12,
    size=120,
    replace=False
)

# Q6: 家庭结构（65%:核心家庭，25%:三代同堂，8%:单亲，2%:其他）
q6 = np.random.choice(
    ["核心家庭"]*78 + ["三代同堂"]*30 + ["单亲家庭"]*10 + ["其他"]*2,
    size=120,
    replace=False
)

# Q7: 孩子年龄（多选，40%:3-4岁，30%:4-5岁，20%:5-6岁，10%:其他）
# 简化处理：每位家长随机选择一个主要年龄段
q7 = np.random.choice(
    ["3-4周岁"]*48 + ["4-5周岁"]*36 + ["5-6周岁"]*24 + ["其他"]*12,
    size=120,
    replace=False
)

# --------------------------------------------
# 2. 教育目标观（Q8-Q9）
# --------------------------------------------
# Q8: 优先培养能力（多选，最多3项）
# 统计结果：创造力52%、规则意识48%、情绪管理45%、知识学习35%、运动能力28%、艺术兴趣15%
def generate_q8():
    options = ["创造力"]*62 + ["规则意识"]*58 + ["情绪管理"]*54 + ["知识学习"]*42 + ["运动能力"]*34 + ["艺术兴趣"]*18
    selected = np.random.choice(options, size=np.random.randint(1,4), replace=False).tolist()
    return ", ".join(selected)

q8 = [generate_q8() for _ in range(120)]

# Q9: 未来期待（多选，78%:身心健康，65%:道德品质，58%:独立能力，30%:名牌大学，25%:高收入）
def generate_q9():
    options = ["身心健康，快乐成长"]*94 + ["具备良好的道德品质"]*78 + ["拥有独立自主的能力"]*70 + ["考上名牌大学"]*36 + ["有稳定的高收入工作"]*30
    selected = np.random.choice(options, size=np.random.randint(1,4), replace=False).tolist()
    return ", ".join(selected)

q9 = [generate_q9() for _ in range(120)]

# --------------------------------------------
# 3. 儿童观（Q10-Q12）
# --------------------------------------------
# Q10: 游戏重要性（2%:1，4%:2，14%:3，35%:4，45%:5）
q10 = np.random.choice([1,2,3,4,5], size=120, p=[0.02, 0.04, 0.14, 0.35, 0.45])

# Q11: 自由探索（1%:1，3%:2，10%:3，30%:4，56%:5）
q11 = np.random.choice([1,2,3,4,5], size=120, p=[0.01, 0.03, 0.10, 0.30, 0.56])

# Q12: 提前学习抑制创造力（反向题，15%:1，25%:2，30%:3，20%:4，10%:5）
q12 = np.random.choice([1,2,3,4,5], size=120, p=[0.15, 0.25, 0.30, 0.20, 0.10])

# --------------------------------------------
# 4. 教育方法观（Q13-Q15）
# --------------------------------------------
# Q13: 纠错方式（多选）
def generate_q13():
    options = ["耐心讲道理"]*78 + ["共同讨论错误原因"]*70 + ["取消娱乐时间"]*24 + ["冷处理"]*10 + ["批评责备"]*14 + ["榜样示范"]*36 + ["自我反思"]*18
    selected = np.random.choice(options, size=np.random.randint(1,4), replace=False).tolist()
    return ", ".join(selected)

q13 = [generate_q13() for _ in range(120)]

# Q14: 常用教育方法（多选）
def generate_q14():
    options = ["制定明确规则"]*72 + ["游戏互动引导"]*58 + ["口头/物质奖励"]*22 + ["鼓励自主解决问题"]*48 + ["以身作则"]*86 + ["协商制定计划"]*36 + ["借助绘本/动画"]*30
    selected = np.random.choice(options, size=np.random.randint(1,4), replace=False).tolist()
    return ", ".join(selected)

q14 = [generate_q14() for _ in range(120)]

# Q15: 适度惩罚（25%:完全必要，40%:有时必要，20%:视情况，10%:不太必要，5%:完全没必要）
q15 = np.random.choice(
    ["完全必要", "有时必要", "视情况而定", "不太必要", "完全没必要"],
    size=120,
    p=[0.25, 0.40, 0.20, 0.10, 0.05]
)

# --------------------------------------------
# 5. 教育内容观（Q16-Q17）
# --------------------------------------------
# Q16: 教育重点（多选）
def generate_q16():
    options = ["社会情感技能"]*82 + ["生活实践能力"]*66 + ["自然科学探索"]*50 + ["基础学科知识"]*36
    selected = np.random.choice(options, size=np.random.randint(1,4), replace=False).tolist()
    return ", ".join(selected)

q16 = [generate_q16() for _ in range(120)]

# Q17: 学科知识融入游戏（10%:1，15%:2，25%:3，30%:4，20%:5）
q17 = np.random.choice([1,2,3,4,5], size=120, p=[0.10, 0.15, 0.25, 0.30, 0.20])

# --------------------------------------------
# 6. 亲子互动观（Q18-Q19）
# --------------------------------------------
# Q18: 每日互动时间（5%:1，10%:2，20%:3，30%:4，35%:5）
q18 = np.random.choice([1,2,3,4,5], size=120, p=[0.05, 0.10, 0.20, 0.30, 0.35])

# Q19: 冲突解决（55%:共同协商，25%:父母说了算，15%:各执己见，5%:孩子说了算）
q19 = np.random.choice(
    ["共同协商", "父母说了算", "各执己见", "孩子说了算"],
    size=120,
    p=[0.55, 0.25, 0.15, 0.05]
)

# --------------------------------------------
# 7. 教育焦虑（Q20-Q21）
# --------------------------------------------
# Q20: 焦虑频率（10%:1，20%:2，30%:3，25%:4，15%:5）
q20 = np.random.choice([1,2,3,4,5], size=120, p=[0.10, 0.20, 0.30, 0.25, 0.15])

# Q21: 焦虑原因（多选）
def generate_q21():
    options = ["孩子表现不如同龄人"]*52 + ["兴趣班选择困难"]*58 + ["家庭教育时间不足"]*58 + ["幼小衔接压力"]*74
    selected = np.random.choice(options, size=np.random.randint(1,3), replace=False).tolist()
    return ", ".join(selected)

q21 = [generate_q21() for _ in range(120)]

# --------------------------------------------
# 8. 影响因素（Q22-Q26）
# --------------------------------------------
# Q22: 育儿知识来源（多选）
def generate_q22():
    options = ["书籍/期刊"]*60 + ["幼儿园指导"]*42 + ["抖音/小红书等平台"]*72 + ["亲友经验"]*48 + ["自我摸索"]*36
    selected = np.random.choice(options, size=np.random.randint(1,4), replace=False).tolist()
    return ", ".join(selected)

q22 = [generate_q22() for _ in range(120)]

# Q23: 代际冲突（15%:经常，40%:偶尔，35%:很少，10%:从未）
q23 = np.random.choice(
    ["经常", "偶尔", "很少", "从未"],
    size=120,
    p=[0.15, 0.40, 0.35, 0.10]
)

# Q24: 传统观念认同（多选）
def generate_q24():
    options = ["严父慈母"]*54 + ["学而优则仕"]*60 + ["男孩应有男孩样"]*36 + ["女孩要文静"]*30 + ["棍棒底下出孝子"]*18 + ["万般皆下品，唯有读书高"]*24 + ["养不教，父之过"]*12
    selected = np.random.choice(options, size=np.random.randint(1,3), replace=False).tolist()
    return ", ".join(selected) if selected else "均不认同"

q24 = [generate_q24() for _ in range(120)]

# Q25: 自媒体使用时间（30%:<1h，40%:1-3h，20%:3-5h，10%:>5h）
q25 = np.random.choice(
    ["<1小时", "1-3小时", "3-5小时", ">5小时"],
    size=120,
    p=[0.30, 0.40, 0.20, 0.10]
)

# Q26: 家长群影响（20%:非常大，30%:较大，30%:一般，15%:较小，5%:无）
q26 = np.random.choice(
    ["非常大", "较大", "一般", "较小", "无影响"],
    size=120,
    p=[0.20, 0.30, 0.30, 0.15, 0.05]
)

# --------------------------------------------
# 9. 开放性问题（Q27）
# --------------------------------------------
# Q27: 高频困惑（62%:幼小衔接，48%:兴趣班选择，35%:亲子互动）
q27 = np.random.choice(
    ["幼小衔接压力", "兴趣班选择困难", "亲子互动质量不足"],
    size=120,
    p=[0.62, 0.48, 0.35]  # 注意：概率需归一化，此处仅为示例，实际需调整
)

# --------------------------------------------
# 整合数据到DataFrame
# --------------------------------------------
df = pd.DataFrame({
    "家长编号": parent_ids,
    "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7,
    "Q8": q8, "Q9": q9, "Q10": q10, "Q11": q11, "Q12": q12,
    "Q13": q13, "Q14": q14, "Q15": q15, "Q16": q16, "Q17": q17,
    "Q18": q18, "Q19": q19, "Q20": q20, "Q21": q21,
    "Q22": q22, "Q23": q23, "Q24": q24, "Q25": q25, "Q26": q26, "Q27": q27
})

# --------------------------------------------
# 保存为Excel文件
# --------------------------------------------
df.to_excel("幼儿家庭教育调查模拟数据.xlsx", index=False)

print("数据已生成并保存为：幼儿家庭教育调查模拟数据.xlsx")
